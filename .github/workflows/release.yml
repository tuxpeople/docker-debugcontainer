name: "Build & Release"

# This worflow needs those secrets:
#
# REGISTRY_TOKEN = quay.io token
# DOCKERPASSWORD = Docker Hub token

on:
  schedule:
    - cron: '3 3 * * *'
  push:
    branches:
      - 'master'
      - 'main'
    tags:
      - 'v*'

env:
  PLATFORMS: "linux/amd64,linux/arm/v7,linux/arm64"     # Build for which platforms
  IMAGENAME: "ghcr.io/tuxpeople/debugcontainer"         # Name of the image
  VERSION: "edge"                                       # Which tag is beeing used if we are building for master/main branch 
  DOCKER_USER: "tdeutsch"                               # Which user to use to login to DockerHub

#####
# To rebuild someone else's repo, do this:
#
# - New env    REPOSITORY: "githubuser/githubrepo"
# - Add this to the checkout:
#        with:
#          repository: ${{ env.REPOSITORY }}
# - One may also need to disable hadolint, due to the quality of others Dockerfile
#####

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Generate Build-Args
        id: build-args
        run: |
          # echo ::set-output name=build-arg1::"buildarg1"
          # echo ::set-output name=build-arg2::"buildarg2"
      -
        name: Checkout
        uses: actions/checkout@v2.3.4
      -
        name: Prepare
        id: prep
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${IMAGENAME}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${IMAGENAME}:${MINOR},${IMAGENAME}:${MAJOR},${IMAGENAME}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${IMAGENAME}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=version::${MAJOR}.${MINOR}.${PATCH}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      -
        name: Hadolint
        uses: brpaz/hadolint-action@v1.5.0
        with: 
          dockerfile: Dockerfile
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to GHCR
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2.7.0
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          build-args: |
            ${{ steps.build-args.outputs.build-arg1 }}
            ${{ steps.build-args.outputs.build-arg2 }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
      -
        name: Copy to Docker Hub
        id: copy_images
        run: |
          for i in $(echo ${{ steps.prep.outputs.tags }} | sed "s/,/ /g")
          do
              GHTAG=$(echo $i | sed "s/ghcr.io/docker.io/g" | sed "s/${{ github.repository_owner }}/${{ env.DOCKER_USER }}/g")
              skopeo copy --all --src-creds=${{ github.repository_owner }}:${{ secrets.GITHUB_TOKEN }} --dest-creds=${{ env.DOCKER_USER }}:${{ secrets.DOCKERPASSWORD }} docker://${i} docker://${GHTAG}
          done
          echo ::set-output name=shortname::$(echo ${{ env.IMAGENAME }} | sed "s/ghcr.io\///g" | sed "s/${{ github.repository_owner }}/${{ env.DOCKER_USER }}/g")
      -
        name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v2.4.3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKERPASSWORD }}
          repository: ${{ steps.copy_images.outputs.shortname }}
          short-description: ${{ github.event.repository.description }}
